#lang racket
(provide (all-defined-out))
(require rackunit)

(define (test-runner-randomized-dupe+ run)
  (test-prim run)
  (test-cond run)
  (test-case run)
  (test-general run))

(define (test-prim run)
  (check-equal? (run '(if #t (not (add1 0)) -1)) #f)
  (check-equal? (run '(if #t (not (if 1 -1 2)) #t)) #f)
  (check-equal? (run '(abs (if 3 (if (- 2) (abs (- -3)) (if 4 2 3)) (sub1 (if #f (- -3) (- -4)))))) 3)
  (check-equal? (run '(if (if 2 0 -2) (- -3) 6)) 3))


(define (test-cond run)
  (check-equal? (run '(sub1 (cond (#f (if (if 3 -1 2) (sub1 (if #f 2 -2)) -2)) (else (if (zero? 0) 6 -5)))) ) 5 )
  (check-equal? (run '(cond ((if 4 (add1 0) -3) (cond ((sub1 (if -4 -3 -4)) (if (if 4 #t #t) (if -1 (zero? -1) (if #f #t -4)) (if #t (if 3 #t #f) (sub1 -1)))) (else (if (add1 1) (if 3 (sub1 0) (add1 -2)) (zero? (if #t -2 -2)))))) ((cond (#f (if 3 (sub1 1) #f)) (else (zero? 3))) (cond ((if 3 #f 0) (if #t (sub1 4) (zero? 2))) (#f (cond ((if 0 -3 #t) (zero? 2)) (else (if -3 #f (if -3 #t 4))))) (else (cond ((if #t #f -1) (sub1 (add1 (if #t 3 0)))) (else (if #t 0 (zero? -3))))))) (else (add1 (if (zero? (if #f -2 -3)) (sub1 (if 1 -2 (add1 4))) (cond (#t (sub1 (if 4 -4 0))) (else (sub1 (if -3 -4 -2)))))))) ) #f)

  (check-equal? (run '(add1 (cond (-3 (if #f (add1 4) (sub1 -3))) (else (if 0 (add1 3) (sub1 -1)))))) -3)
  (check-equal? (run '(cond ((if #f 2 #f) (sub1 (if #f (if 2 -3 -1) 2))) ((if -2 -1 -1) (cond (0 (add1 (if #t -4 1))) (else (if #t (if 1 #f -2) 1)))) ((if #f #f #t) (cond (#f (zero? (if -1 1 0))) (else (zero? (sub1 -3))))) (else 6))) -3 )
  (check-equal? (run '(add1 (if (cond ((sub1 -2) (zero? (sub1 (add1 (if #t 4 1))))) (#f -7) (-1 (sub1 (cond (else (if -4 (if #f 2 2) (sub1 -1)))))) (else (if (zero? 0) (sub1 (sub1 2)) -5))) (if (cond ((if 2 -4 #t) (add1 -3)) (else (if (zero? -3) (if 1 #f #t) -6))) (if (if #f (add1 -4) (add1 4)) (if (zero? -3) (add1 (sub1 0)) (sub1 3)) (if #f 5 (if #t 0 -3))) (cond (#t (cond (#t (if 4 0 0)) (else (sub1 (add1 (add1 4)))))) ((if -3 1 1) (if 1 (if #t -3 2) (if -4 -1 3))) ((if -4 #f #f) (cond (#t (sub1 (if #f -2 4))) (else (add1 (if -1 -1 -3))))) (else (add1 7)))) (cond ((if (if 0 #f #t) (if #f #t 3) (zero? (if #t 0 -2))) (if (if #f -3 (add1 -4)) (cond (else (cond (#f (sub1 -6)) (else -3)))) (if (sub1 -3) (if #t -2 0) (if -2 -3 4)))) ((cond ((add1 1) (sub1 (add1 (if #t -3 -3)))) (else -3)) (if (if #t #t (sub1 0)) (sub1 (if -2 (sub1 (if -4 4 0)) (if -1 3 1))) (sub1 (cond (#t 2) (else (sub1 (sub1 -3))))))) (else (add1 (sub1 (if (zero? (if -4 -2 -2)) (add1 (add1 4)) (cond (#t (sub1 -4)) (else (add1 (add1 (if 3 4 -3))))))))))))) -2)
  (check-equal? (run '(if (cond ((zero? -3) (if 4 (if #t 3 #t) (add1 -2))) (else (if #f (if #f #t #t) 3))) (cond ((zero? (if #t -4 4)) (cond (2 #f) (0 (zero? (sub1 1))) (else (sub1 3)))) (else (cond (#f (sub1 (if -4 -4 -3))) (else (sub1 (if 2 0 (if 0 0 -3))))))) (if 1 (if 1 (sub1 -1) (sub1 -3)) (zero? (sub1 -2))))) -1)
  )


(define (test-case run)

  (check-equal? (run '(case (if #t 0 2) ((#t #t 15) (zero? (sub1 3))) ((#f 13 #t) #f) (() (sub1 (if #t 2 1))) (else (if 3 #t #t)))) #t)
  (check-equal? (run '(case (if 3 (if #f 2 1) 3) ((-7) #f) (else (case #f ((-14 14) (if -2 (if 1 1 -3) (if 2 #t #t))) ((#t 12) 4) (else (if -3 (if #f 4 -1) #t)))))) -1)
  (check-equal? (run '(if (case (add1 (if 2 3 0)) ((-2 #t) (zero? (sub1 1))) ((-2 2) (if #f (if #f 0 -4) (zero? -4))) (else (add1 (if #t -3 4)))) (sub1 (sub1 (case (case 4 ((#t) (if -3 (if -4 1 2) (add1 -2))) (else (if -3 (add1 1) (add1 4)))) ((4 -10) (sub1 (sub1 (sub1 (sub1 3))))) ((17 2 -17) 2) ((#f #t -11) (if #t (sub1 -2) (sub1 -4))) (else (case 1 ((#f) (if -4 -2 (if #t 1 -3))) (else (if #f (sub1 1) (if #t -3 -3)))))))) (zero? (if (if -2 (if #f #f -2) -3) (sub1 (sub1 (case -5 ((5) (if #f -2 (if -1 0 2))) (else (add1 (add1 -4)))))) (case (if 4 4 -4) (() (if 0 2 (sub1 1))) (else (if 0 (add1 -3) (sub1 -3)))))))) 0)
  (check-equal? (run '(zero? (case (add1 (if #t 4 2)) ((#t -11) (sub1 (add1 (add1 2)))) ((-10 13) (add1 4)) (else (if #f (if -4 -2 0) (if #t 4 -4)))))) #f)
  (check-equal? (run '(sub1 (add1 (if (sub1 2) (add1 (sub1 (if #t 1 0))) (case 5 ((#t) (if 0 (if #t 0 1) (sub1 -4))) (else (add1 3))))))) 1)
  (check-equal? (run '(if (if -5 (if -3 -3 0) (if #t #f #f)) (if (zero? (if 2 1 -3)) (if 3 (sub1 -3) -5) (case (if 1 #f -4) ((#f) (sub1 (if #t -1 2))) (else (if #f #t (zero? 0))))) (add1 (if (zero? 3) (sub1 (if #f (if #f -3 -4) (sub1 3))) (if -2 -1 0))))) -2)
  (check-equal? (run '(zero? (case (add1 (if #t 4 2)) ((#t -11) (sub1 (add1 (add1 2)))) ((-10 13) (add1 4)) (else (if #f (if -4 -2 0) (if #t 4 -4)))))) #f)
  (check-equal? (run '(if (case (case (if #t #t 2) (() #t) ((#f #f) (if #t -4 2)) (else -5)) (else (case (case (if #t #t -2) (() #t) (else (if 4 (zero? -4) (if #t -3 #f)))) ((#f) (case (if 1 (if #t #t 1) (if #f #t 0)) (else (if (zero? -1) (zero? (add1 -1)) (if #f (sub1 4) #t))))) (else (if (if 1 #t 3) (case #t ((4) (add1 (if 0 4 -1))) (else (sub1 (if 2 1 2)))) (add1 (if #t -5 (if 1 4 1)))))))) (case (if (add1 (add1 0)) (case (sub1 3) ((-5) #t) (else (sub1 (if 0 -4 -3)))) (if 2 -3 (if 2 #f #f))) ((-36 #f -11 #t #t) 9) ((-10 -37 24 -15 18) (case (add1 3) ((-2 #f) (sub1 (sub1 2))) ((1 #t) (zero? 1)) (else #t))) ((-4 3 7 #f -25) (if (if #t 4 #t) (if #f -2 2) (add1 4))) ((#f -29 #f #f -15) (if #t #f (add1 (add1 3)))) ((14 -5 #f -17 -35) (case (if #f #f 3) ((5) (zero? (add1 (if 3 1 4)))) (else (zero? (add1 (sub1 (sub1 2))))))) (else (if #f (if 4 2 #f) 1))) (if (if #t (zero? 3) (sub1 -6)) (add1 14) (zero? (if (if 3 (add1 1) (if #f #f #f)) (case 0 ((#t) (if 3 (add1 1) -4)) (else (case -5 (else (add1 (if #f 0 1)))))) (case (if #t -1 -4) ((#f #t) (add1 (sub1 4))) ((10 2) (if #f -2 3)) (else (if 1 -4 1)))))))) #f)
  (check-equal? (run '(sub1 (case (sub1 (case (if 4 (sub1 2) -5) ((#t) (case (if #t 1 -2) ((#t) (if (if #t 0 #t) (if #t -3 -4) (sub1 1))) (else (if #f (sub1 0) (add1 (sub1 -2)))))) (else (if (if #f 0 -2) (if #f 0 -1) (sub1 (add1 -2)))))) ((#t #t #t #f -49 #f -54) (add1 (add1 (add1 (if #t -2 1))))) ((-26 #t -3 52 #t #t #t) (if (sub1 2) (if -1 0 4) (sub1 (if #t -2 4)))) ((#t -10 4 59 54 -53 #f) (add1 (if #t 3 3))) ((#t #t #t #f #f 27 #t) (add1 (case (if #t 1 0) ((1) (if #t (sub1 -3) (if -1 -1 -2))) (else -4)))) ((#t -33 -29 -45 -2 #f #f) (if -3 (sub1 (if #f 3 1)) (add1 (if -4 -3 -1)))) ((-33 #t 33 49 #t 1 -14) (if (sub1 1) -4 (add1 (add1 -4)))) ((-25 -7 #t -34 #f) (case (if #t -4 4) ((-2 #t) (sub1 2)) ((#t #f) -2) (else (add1 4)))) (else (add1 (if 3 (if -4 -4 -2) (if 3 -1 -3))))))) -1)
  (check-equal? (run '(case (if (if -1 #t 3) (add1 (if #t 1 0)) (add1 (if #t -2 3))) ((-19 -5 -17) (zero? (if #f -3 -3))) ((1 #f -19) (case (if -3 -1 #t) ((7) (if #t (if #t 1 1) #t)) (else (if -3 (sub1 2) (if -2 #t #t))))) ((-24 7 -18) (if (zero? -2) (add1 (sub1 -1)) (if #f 1 -3))) (else (case (zero? -2) ((4) (zero? (if 2 -2 -3))) (else (sub1 (if -4 -1 -2))))))) -2)
  (check-equal? (run '(case (case (zero? -2) ((#t) (case (sub1 3) ((-2 #t) (sub1 0)) ((#t -7) 1) (else (sub1 1)))) (else (add1 (add1 0)))) ((#f) (zero? (if (if #f 1 #t) (if #f (sub1 1) (if -1 3 0)) -7))) ((20 #f) (case #f ((-7 #f) (if 3 -1 (zero? 4))) ((-13 #f) (if 1 -2 (zero? -1))) (else (if 0 #t (sub1 1))))) (else (zero? (add1 (if (zero? 3) (if #t (if -4 -2 2) 5) (if #t (sub1 -4) 0))))))) #f)
  (check-equal? (run '(case (case -3 ((#f) (sub1 (sub1 (sub1 (if #f 4 4))))) ((#f -3) (case #t ((-1) (if #f (if #t 4 #f) (if 1 #f 3))) (else (sub1 (if #f 3 0))))) (else (case 1 ((#t) (zero? (if #t -1 3))) (else (add1 (add1 -1)))))) ((#t #t #f) (if (if #t -2 #t) (sub1 -7) (case #f (() #t) (else (if -3 3 #f))))) ((#f 17) (if 1 (add1 1) (sub1 (add1 (add1 (add1 3)))))) ((9 #t #t) (case (zero? (add1 0)) ((#f #f #f) (zero? 1)) ((-7 -8 #f) (if #t #t -4)) ((-2 #t #t) -4) (else #f))) (else (add1 (case (add1 (if #f -4 3)) ((-1 #f) (sub1 (sub1 (add1 2)))) ((-4 11) (add1 5)) (else (sub1 (add1 (if #f -1 3))))))))) 4)
  (check-equal? (run '(sub1 (if (if (sub1 0) (zero? 4) (if #t #f 0)) (if (sub1 (if #t 0 -1)) (case 0 ((-2) (add1 (if #f 4 1))) (else (if 3 (sub1 2) (if #f 1 -3)))) (sub1 (add1 (if 3 2 1)))) (case (sub1 (sub1 -4)) ((#t) (if #f -6 4)) (else (case (if #t 2 -2) ((#t) (if (zero? -2) 3 (add1 (if #f -1 -4)))) (else (case -5 (else (if #f (add1 -2) 0)))))))))) -1)

  )
(define (test-general run)
  (check-equal? (run '(if #t (not (add1 0)) -1)) #f)
  (check-equal? (run '(case (if #f #f -3) ((#t 7 -5) 4) ((14 -10 #t) #t) ((#f -13 11) (if #f -1 4)) (else (if #f 3 #t)))) #t)
  (check-equal? (run '(if (add1 (case (cond ((sub1 (sub1 -1)) (add1 (case 0 ((#f) (cond (#t -5) (else -5))) (else (cond (else (abs -2))))))) (else (if (add1 -4) (- 0) (if #f 0 4)))) ((-23 -24 -7 3) (case 3 ((2) (sub1 (cond ((if 3 #t -4) (if -2 (sub1 -2) -4)) (else (if 1 (sub1 -4) (if 4 -3 4)))))) (else (case 0 ((8) (if #f (add1 -3) (add1 -4))) (else (add1 (if 0 -3 1))))))) ((#f -2 9 #f) (cond (#t (abs (add1 2))) (else (abs (case (add1 -4) (else (if 3 (sub1 1) (if -2 0 0)))))))) ((-3 #f 10 27) (case (if 2 3 0) ((#f) (if #f 4 0)) ((#t -9) (sub1 (if #f -3 -3))) (else (if 0 1 2)))) ((#f #f -35 -31) (cond (#t (if #t -1 3)) (#f (if #t -2 -1)) (else (add1 (if -3 4 0))))) (else (if (sub1 -3) (sub1 (if 4 -3 -4)) (abs 4))))) (if (zero? (abs (if (add1 (sub1 2)) (case (if #f 2 2) ((#f #f) 2) ((-2 1) (- 0)) (else (if #t 4 3))) (cond (2 (if 4 -5 (if #f -4 -4))) (else 1))))) (zero? (cond (2 (cond ((zero? 2) -4) (else (add1 (abs 1))))) ((if 1 #t #f) (case -4 ((#f) (if -2 (abs 0) (if #t 4 1))) (else (if #t (sub1 2) 3)))) ((abs -2) (case (if 2 1 -1) ((#f) (if 3 (if 0 0 0) (abs -1))) (else (sub1 (if -3 2 4))))) ((abs -4) (add1 -5)) (#f (if #f 3 4)) (else (cond (else (if 4 (sub1 4) (sub1 -3))))))) (if (case #f (else (abs (if #t (abs 1) -3)))) (case (- (if #t 2 3)) ((7 #t -3) (sub1 (if -4 -3 -4))) ((6 -2 -13) (- (if -3 -2 -3))) ((-8 #f #f) (if #t #t #f)) (else -2)) (case -4 ((0) #t) (else 12)))) (case (not (if (- 2) (case (not 4) ((-8) (case 3 ((8 #f) (not #f)) ((9) (- -2)) (else (add1 -3)))) (else (if (if -4 #f #f) (if -2 -3 1) 4))) (case (not #t) ((#t) (sub1 (if #f -3 (if #f -1 -2)))) (else (- (if -3 (- 3) (if #t 4 1))))))) ((78 -65 -7 58 -58) (if (if #t 1 0) (if 0 (not 0) (add1 4)) (cond ((if #f -3 #t) (if 3 (abs 2) (if #f #t 4))) (else (abs (if -1 3 -3)))))) ((-50 #t -20 17 #f) (cond ((zero? 1) (not (if #f 0 1))) (0 (if 0 (sub1 3) -5)) (#f (if #t (if 4 #f -2) (zero? 1))) (else (if #f #t (if #f #f 0))))) ((#f -61 52 -45 43) (if (abs (if 1 -2 0)) (if 0 4 4) (not (zero? 6)))) ((39 #f -62 41 -54) (if #t (zero? (abs (if -1 2 0))) (not (sub1 (sub1 (if 0 -4 0)))))) ((#t #t #t 3 69) (case (abs (- (sub1 -4))) ((#t -11 -11) (abs (add1 (sub1 -2)))) ((#t 8 -14) (if #t (if #t 2 -3) (zero? -3))) ((-9) 4) (else (if #f (if #f #t #t) (if -1 1 0))))) (else (zero? (case (add1 (if 4 -3 -1)) ((#t #f) (add1 (add1 (if 1 -3 -2)))) ((#f #f) (- (if #f 3 -3))) (else (case (abs 2) ((#t) (abs (if -1 3 4))) (else (if 0 -1 (abs -2))))))))))) 2)
  (check-equal? (run '(sub1 (add1 (if (sub1 2) (add1 (sub1 (if #t 1 0))) (case 5 ((#t) (if 0 (if #t 0 1) (sub1 -4))) (else (add1 3))))))) 1)
  (check-equal? (run '(if (case (if #f #t 2) ((-7) (if 2 (not 0) #f)) (else (not (if -3 1 #f)))) (case #t ((2 -8) (if #f 0 (zero? 3))) ((2 7) (if #t #t -5)) (else (if -4 #f (if -1 #f #t)))) (sub1 (case -3 ((-7 -3) (- (abs 5))) ((#t #f) (sub1 (sub1 (if -1 -3 -2)))) (else (if #f -5 (if #t 4 2))))))) -6)
  (check-equal? (run '(cond ((add1 -1) (if #f (if 0 1 #f) (not #t))) (else 4))) #f)
  (check-equal? (run '(cond (3 (case (if #f 4 -2) ((#t #f) (if #f (if #f 3 2) #t)) ((-2 -8) (if -3 (sub1 2) (- -1))) (else (if #t (- -3) #t)))) (else (if (if 0 -3 -1) (if -3 3 (if #t -1 0)) 7)))) 1)
  (check-equal? (run '(cond ((case (if #f #t 0) (else -4)) (if (if 3 (- 2) #t) (case (if 3 #t #f) ((1) (if #f (if 2 #t -2) (if -2 3 #t))) (else (case (zero? 4) (else (if 2 (if 4 #t -1) (if -1 #t #f)))))) (cond (#f (if #t #t -2)) (else (cond ((if 1 -3 #f) #t) (else (sub1 (- -1)))))))) ((cond (else (zero? (if #t 1 1)))) (cond (4 (sub1 -3)) (2 0) ((sub1 -4) (abs (if 4 0 2))) (else (if -3 #t (if #t -1 #t))))) (else (if (if -2 1 2) (if (- 4) (sub1 (if #f -1 3)) 2) (case #f (else (case #f ((#f) (abs (if 1 0 -4))) (else (zero? (if -4 4 -4)))))))))) #t)
  (check-equal? (run '(cond ((if #t #f #t) (if (abs -2) (if #t 0 #f) (if -3 3 #f))) ((abs 1) (- (add1 (sub1 (if 0 -1 3))))) (1 (add1 (cond ((if #t #f #t) (if 2 (if #f -1 -4) -3)) (else (if #t 0 (if -4 4 4)))))) ((not -1) (if (- 2) (sub1 -4) (abs (if 2 0 -1)))) ((if #f -3 #t) (cond (0 (zero? 3)) (else (if #f (if #t 4 #t) #t)))) (else (if (if #t -2 3) (zero? (abs 2)) (sub1 (add1 3)))))) 1)
  (check-equal? (run '(cond ((if 2 4 #t) (sub1 (sub1 (if 0 -4 3)))) ((add1 4) (- (if #t -3 0))) ((if -4 #t -4) #f) (#f 7) (else (if 1 (if #t #t -2) #t)))) -6)
  (check-equal? (run '(case (case 5 ((#f) (case (if #t #t #f) (() (not (if #f #f 2))) ((12 4) #f) (else #t))) (else (case (sub1 (if #f -1 -4)) ((#t 8) (if #t (if 3 3 1) (zero? -1))) ((7 1) (sub1 (add1 (sub1 -1)))) (else (if #f 4 (- -3)))))) ((#t 31 28 45) (case (sub1 (if #t -1 -4)) ((#t) (cond (else (cond ((abs 4) (if 1 (zero? -3) (if #t #t 3))) (else (if #t #f 3)))))) (else (if -3 6 #t)))) ((-8 -36 #t 15) (case (not #f) ((#f) (if (if -2 1 -4) (if -4 -2 #f) (add1 (abs 4)))) (else (abs (if (if -4 0 3) (if 1 -1 -2) (if #t 3 3)))))) ((#f) (case (if #t #t #t) ((-6 #t) (abs 1)) ((10 -2) (if 4 (if #t -2 #f) (zero? 3))) (else (zero? (if 1 2 -4))))) ((3 #t -5 4) (cond ((not (sub1 4)) (if (if #f 1 #f) #t (add1 (if -2 -2 4)))) (else (case 2 ((#t #t) 2) ((#t #f) (not (not #f))) (else (if -4 -3 3)))))) (else (case (abs (if #f -4 4)) ((8) (case (if 2 #t #f) ((#f) (if #t (abs 3) (if #t #t #f))) (else (abs (if -4 (sub1 4) (sub1 2)))))) (else (cond (#f (if #f (if 4 -4 #f) (if #t -3 #t))) (else (if 1 (if #f 3 #f) (if #f #t #t))))))))) -3)
  (check-equal? (run '(case (cond (#f #f) (-1 (if 3 #t 1)) (else (- (if #t 2 -3)))) ((#f #f -31) (case (zero? 4) ((#t -3) 4) (() (if #f #t #f)) (else (abs 1)))) ((-31 -16 #f) (sub1 (if #t (add1 (- 3)) 2))) ((28 -18 29) (cond ((if 3 -1 3) (if (zero? 4) #t (add1 (if #f 4 1)))) (else (case #t ((#f) #t) (else (if #t #t (if #f 3 #t))))))) (else (if (if #t #f 2) (if 3 #f 2) #t)))) #t)
  (check-equal? (run '(case (cond (#f (cond ((if #t 3 #f) (- (sub1 (- 4)))) (else (sub1 (if #f -1 -2))))) ((not #f) (not (if #t (if -2 1 2) (if 3 0 #t)))) (else #f)) ((51 10 -38 #f #f #f) (if (if 0 #f #f) (zero? 2) (if #f -2 -4))) ((8 #t 43 #t 10 #f) (if -3 (abs (- 0)) (- 0))) ((#f #f -33 #t 43 #f) (cond (else 5))) ((#t 27 -5 #t #f #f) (if #f (zero? (add1 -3)) (zero? -4))) ((#f #f 11 27 #t #f) (add1 (case (if 4 -1 -4) ((-3) (- (sub1 (- 0)))) (else (if 0 (sub1 0) 0))))) ((5 -7 #f -5 #f #f) (not (cond ((add1 -3) #f) (else (if 1 (if 4 #f #t) (- 4)))))) (else (if (sub1 -1) #t (add1 (if #f -4 2)))))) -4)
  (check-equal? (run '(cond ((if #f -1 1) (case (not 1) ((-9) (cond (else (if #t (if -2 2 #t) #f)))) (else (sub1 (abs (sub1 (if -2 -3 -3))))))) ((add1 (- -3)) (cond (-2 (case 1 (() (zero? (- (if #f 2 2)))) (else (abs (if -2 4 -4))))) (else (cond (else (add1 (if 1 -3 1))))))) (else (if (abs 4) (add1 (if #f 0 0)) (if -2 #f 2))))) 3)
  )

